[{"C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\index.js":"1","C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\reportWebVitals.js":"2","C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\App.js":"3","C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\components\\header\\header.jsx":"4","C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\components\\pages\\pages.jsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":6665,"mtime":1613727817961,"results":"9","hashOfConfig":"7"},{"size":1554,"mtime":1613551860023,"results":"10","hashOfConfig":"7"},{"size":6785,"mtime":1613745249852,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"8r5khx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\index.js",[],["26","27"],"C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\reportWebVitals.js",[],"C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\App.js",["28","29","30","31","32","33"],"import React, { Component } from \"react\"\nimport $ from 'jquery'\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/header/header.jsx'\nimport Pages from './components/pages/pages.jsx'\n\nclass HoursDataConstructor {\n  constructor( date, hour, main, weather, wind, visibility ) {\n      this.weather = {\n        date: date,\n        hour: hour,\n        temperature: {\n          currentTemp: main.temp,\n          minTemp: main.temp_min,\n          maxTemp: main.temp_max,\n          measureUnit: 'Â°C'\n        },\n        feelsLike: {\n          feelValue: main.feels_like,\n          measureUnit: 'Kelvin'\n        },\n        humidity: {\n          humidityValue: main.humidity,\n          measureUnit: '%'\n        },\n        pressure: {\n          pressureValue: main.pressure,\n          measureUnit: 'hPa'\n        },\n        wind: {\n          windValue: wind.speed,\n          measureUnit: 'm/s'\n        },\n        visibility: {\n          visibilityValue: visibility\n        },\n        weather: weather\n      };\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      pages: ['statistics', 'cards', 'data', 'about'],\n      numOfPages: 4,\n      pageActive: 3,\n      dataLoaded: false,\n      cityData: {},\n      data: [],\n      listData: [],\n      days: [],\n      dataUpdate: [],\n      dates: []\n    }\n  };\n  setPage = (page) => {\n    this.setState({\n      pageActive: (page + 1)\n    })\n  }\n  componentDidMount = async () => {\n    try {\n        await this.weatherDataCall('skopje')\n        } catch(err) {\n        console.log(err)\n    }\n  }\n\n  weatherDataCall = (city) => {\n    let currentTime = new Date()\n    let daysTime = this.printDates(5)\n    let listData, days, data;\n    currentTime = currentTime.toString().split(' ')[4]\n        try {\n          this.setState({\n            dataLoaded: false\n          }, async () => {\n            await this.fetchData(city)\n            .then((dataX) => {\n              listData = this.filterDays(dataX.list)\n              days = this.eliminateDuplicates(listData)\n              console.log(days)\n              data = this.filterData(listData, days)\n              this.setState({\n                cityData: dataX.city,\n                dataLoaded: true,\n                listData: listData,\n                days: days,\n                data: data,\n                dataUpdate: currentTime,\n                dates: daysTime\n              })\n          })\n          })\n        } catch (err) {\n          \n        }\n  }\n  \n  fetchData = async (city) => {\n    let oldWeatherApi = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=814e138461b0f6b9423de687beb9ff3e`\n    let newWeatherApi = `http://api.weatherapi.com/v1/forecast.json?key=e9ff8cb3a35840cfa1d103610211702&q&q=${city}&days=10`\n    let call = await fetch(oldWeatherApi)\n    let data = await call.json()\n    console.log(data)\n    return data\n  }\n\n  filterDays(days) {\n    let listData = [];\n    let date;\n    let hour;\n    let newDay\n    for (let day of days) {\n        date = `${day.dt_txt.split('-')[2].split(' ')[0]}.${day.dt_txt.split('-')[1].split(' ')[0]}`\n        hour = `${day.dt_txt.split('-')[2].split(' ')[1].slice(0,5)}`\n        newDay = new HoursDataConstructor(date, hour, day.main, day.weather, day.wind, day.visibility)\n        listData.push(newDay)\n    }\n    return listData\n  }\n  eliminateDuplicates(array) {\n    let i,\n        length = array.length,\n        outArray = [],\n        object = [];\n    for (i = 0; i < length; i++) {\n        object[array[i].weather.date] = 0;\n    }\n    for (i in object) {\n      outArray.push(i);\n    }\n    if(outArray.length > 5) outArray.pop()\n    return outArray;\n  }\n\n  clearInput(input, secondInput){\n    input.value = ``;\n        if(secondInput === undefined){\n            return\n        }else{\n            secondInput.innerHTML = ``\n        }\n  }\n\n  printDates(limit) {\n    let daysTime = []\n    for (let i = 0; i < limit; i++) {\n      let tomorrow = new Date()\n      tomorrow.setDate(tomorrow.getDate() + i)\n      tomorrow = tomorrow.toString().split(' ')[0]\n      daysTime.push(tomorrow)\n    }\n    return daysTime\n  }\n\n  filterData(listData, filterDate) {\n    console.log(filterDate)\n    let filterStats = []\n    let averageStats = []\n    for (let i = 0; i < 5; i++) {\n      listData.map((data) => {\n        console.log(data)\n          if(data.weather.date === filterDate[i]) {\n              if(filterStats.length === i + 1) {\n                filterStats[i].push([data.weather])\n              } else {\n                filterStats.push([[data.weather]])\n              }\n          }\n      })\n      if(i === 4) {\n        console.log(filterStats)\n          this.dailyStats(filterStats[1], averageStats, 'temperature','currentTemp')\n          this.dailyStats(filterStats[1], averageStats, 'humidity','humidityValue')\n          this.dailyStats(filterStats[1], averageStats, 'wind','windValue')\n      }\n  }\n    return filterStats\n  }\n  dailyStats(statsFilter, array, object,stat) {\n    let statsArray = []\n    statsFilter.map((arrayFilter) => {\n        let average = 0;\n        arrayFilter.map((stats) => {\n            average += stats[object][stat]\n        })\n        if ( object === 1 ){\n            statsArray.push(Math.ceil([average / arrayFilter.length]))\n        } else {\n            statsArray.push(Math.round([average / arrayFilter.length]))\n        }\n    })\n    array.push(statsArray)\n}\n\nrender() {\n  const {\n    pages,\n    numOfPages,\n    pageActive,\n    dataLoaded,\n    cityData,\n    data,\n    listData,\n    days,\n    dataUpdate,\n    dates,\n  } = this.state;\n  if(!dataLoaded) {\n    return (\n      <div>\n        <span>Loading</span>\n      </div>\n    )\n  } else {\n    const content = (\n      <div className=\"content\">\n        <Header\n          pages={pages}\n          numOfPages={numOfPages}\n          pageActive={pageActive}\n          listData={listData}\n          days={days}\n          setPage={this.setPage}\n          dataCall={this.weatherDataCall}\n        />\n        <Pages\n          pages={pages}\n          numOfPages={numOfPages}\n          pageActive={pageActive}\n          cityId={cityData.id}\n          cityName={cityData.name}\n          sunrise={cityData.sunrise}\n          sunset={cityData.sunset}\n          currentTemp={listData[0].weather.temperature.currentTemp}\n          measureUnit={listData[0].weather.temperature.measureUnit}\n          weatherDescription={listData[0].weather.weather[0].description}\n          data={data}\n          listData={listData}\n          days={days}\n          dataUpdate={dataUpdate}\n          dates={dates}\n        />\n      </div>\n  )\n  return content\n  }\n}\n}\n\nexport default App;\n","C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\components\\header\\header.jsx",["34"],"import React from 'react'\r\nimport \"./header.css\";\r\n\r\nconst Header = (props) => {\r\n    const { pages, numOfPages, pageActive, listData, days } = props\r\n\r\n    let setPage = (index) => {\r\n      if(props.setPage) {\r\n        props.setPage(index)\r\n      }\r\n    }\r\n\r\n    const getCityInfo = (event) => {\r\n      if( event.keyCode === 13) {\r\n        props.dataCall(event.target.value, days, listData)\r\n      }\r\n    }\r\n\r\n    const items = pages.map((page, index) => (\r\n      <div\r\n      className={(index + 1) === pageActive ? 'navbar-item active-item' : 'navbar-item'}\r\n      onClick={() => setPage(index)}\r\n      key={index}\r\n      >\r\n        {page}\r\n      </div>\r\n    ))\r\n        \r\n    const navbarContainerLeft = (\r\n        <div className=\"navbar-container-left\">\r\n          <div className=\"navbar-logo\">\r\n            <img src=\"/assets/img/Vector.svg\" alt=\"\"></img>\r\n            <span>A-CODE Weather</span>\r\n          </div>\r\n            <div className=\"navbar-items\">\r\n              {items}\r\n            </div>\r\n        </div>\r\n    )\r\n    const searchContainer = (\r\n        <div className=\"search-container\">\r\n          <form onKeyDown={(e) => {getCityInfo(e)}}>\r\n            <input type=\"search\" placeholder=\"Search City\"></input>\r\n          </form>\r\n        </div>\r\n    )\r\n    const navbarContainer = (\r\n        <div className=\"navbar-container\">\r\n            {navbarContainerLeft}\r\n            {searchContainer}\r\n        </div>\r\n    )\r\n    return  <div className=\"navbar\">\r\n                {navbarContainer}\r\n            </div>\r\n}\r\n\r\nexport default Header;","C:\\Users\\KITS-OPERATOR\\Documents\\weather-app-2.0\\src\\components\\pages\\pages.jsx",["35","36","37","38","39"],"import React from 'react'\r\nimport \"./pages.css\"\r\n\r\nconst Pages = (props) => {\r\n    const { pages, pageActive, cityName, cityId, listData, days, dataUpdate, data, weatherDescription, currentTemp, measureUnit,sunrise, sunset } = props\r\n    let counter = 0;\r\n    let pageInfo = null\r\n    let dayImage;\r\n    let nightImage;\r\n    const windImage = require(`../../assets/img/wind.svg`).default;\r\n    const humidityImage = require(`../../assets/img/humidity.svg`).default;\r\n    const sunriseImage = require(`../../assets/img/sunrise.jpg`).default;\r\n    const sunsetImage = require(`../../assets/img/sunset.jpg`).default;\r\n    let sunRise = new Date(sunrise * 1000)\r\n    let sunSet = new Date(sunset * 1000)\r\n    const sunriseEl = (\r\n        <div className=\"sun-data sunrise\">\r\n            <img src={sunriseImage} alt=\"\"/>\r\n            <div className=\"info-container\">\r\n                <span>Sunrise</span>\r\n                <span>\r\n                    {sunRise.toString().split(' ')[4]}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const sunsetEl = (\r\n        <div className=\"sun-data sunset\">\r\n            <img src={sunsetImage} alt=\"\"/>\r\n            <div className=\"info-container\">\r\n                <span>Sunset</span>\r\n                <span>\r\n                    {sunSet.toString().split(' ')[4]}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n    let statisticsCard = days.map((date, index) => {\r\n        dayImage = require(`../../assets/img/day/${data[index][0][0].weather[0].description.replace(' ', '_')}.png`).default\r\n        nightImage = require(`../../assets/img/night/${data[index][0][0].weather[0].description.replace(' ', '_')}.png`).default\r\n        let cards = (\r\n            <div className=\"card\"\r\n                key={index}\r\n            >\r\n                <div className=\"weather-description\">\r\n                    <img src={dayImage} alt=\"\"/>\r\n                    <span className=\"degrees\">{Math.floor(data[index][0][0].temperature.currentTemp * 10) / 10}{measureUnit}</span>\r\n                    <span className=\"weather-condition\">{data[index][0][0].weather[0].description}</span>\r\n                    <span>{date}</span>\r\n                </div>\r\n                <div className={index === 0 ? 'weather-extra-info active-info' : 'weather-extra-info'}>\r\n                    <span>{cityName}</span>\r\n                    <span><img src={windImage} alt=\"\"/>{data[index][0][0].wind.windValue}{data[index][0][0].wind.measureUnit}</span>\r\n                    <span><img src={humidityImage} alt=\"\"/>{data[index][0][0].humidity.humidityValue}{data[index][0][0].humidity.measureUnit}</span>\r\n                    {sunriseEl}\r\n                    {sunsetEl}\r\n                </div>\r\n            </div>\r\n        )\r\n        return cards\r\n    })\r\n\r\n    let cards = (\r\n        <div className=\"cards-information\">\r\n            <div className=\"card major-card control-card\">\r\n                {statisticsCard[0]}\r\n            </div>\r\n            <div className=\"minor-cards card-control\">\r\n                {statisticsCard.map((element, index) => {\r\n                    return index !== 0 ? element : null\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const hourMainCard = (\r\n        <div className=\"current-weather\">\r\n            <span>Current Weather</span>\r\n            <span className=\"city-name\">{cityName}</span>\r\n            <div className=\"current-weather-info active-info\">\r\n                <img src={dayImage} alt=\"\"/>\r\n                <span className=\"temp\">{Math.floor(currentTemp * 10) / 10}{measureUnit}</span>\r\n                <span>{weatherDescription}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n    const minorCard = (count) => data.map((element, index) => {\r\n        let header = element.map((head, indexEl) => {\r\n            if( counter < count ) {\r\n                let headerEl = indexEl === 0 ? (\r\n                    <div className=\"card-header\">\r\n                        {days[index]}\r\n                    </div>\r\n                ) : null;\r\n                \r\n                let cardEl = (\r\n                    <div className=\"hour-card\">\r\n                        <div className=\"temp-details\">\r\n                            <span className=\"hour\">{head[0].hour}</span>\r\n                            <div className=\"temp-container\">\r\n                                <span className=\"temp\">{head[0].temperature.currentTemp}</span>\r\n                                <span className=\"degrees\">{head[0].temperature.measureUnit}</span>\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"description\">\r\n                            {<i class=\"fas fa-caret-down\"></i>}\r\n                        </span>\r\n                    </div>          \r\n                );\r\n                    cardEl = indexEl === 0 ? (\r\n                        <div className=\"data-list\">\r\n                            {headerEl}\r\n                            {cardEl}\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"data-list\">\r\n                            {cardEl}\r\n                        </div>\r\n                        )\r\n                    counter++\r\n                return cardEl\r\n            } else  {\r\n                return\r\n            };\r\n        })\r\n        return header\r\n    })\r\n\r\n    switch (pageActive) {\r\n        case 1:\r\n            pageInfo = (\r\n                cards\r\n            )\r\n            break;\r\n        case 2: \r\n            pageInfo = (\r\n                <div className=\"hour-cards\">\r\n                    <div className=\"left-side\">\r\n                        {hourMainCard}\r\n                    </div>\r\n                    <div className=\"right-side\">\r\n                        {minorCard(7)}\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n        case 3: \r\n            pageInfo = (\r\n                <div className=\"data-cards\">\r\n                    {statisticsCard[0]}\r\n                    {minorCard(40)}\r\n                    <div className=\"shadow\"></div>\r\n                </div>\r\n                )\r\n            break;\r\n        case 4: \r\n            pageInfo = (\r\n                <div className=\"about-info\">\r\n                    <span>Nothing to see here!</span>\r\n                </div>\r\n            )\r\n            break;\r\n        default:\r\n            \r\n            break;\r\n    }\r\n\r\n\r\n\r\n    const pageContainer = pages.map((pageName, index) => (\r\n        <div className={(index + 1) === pageActive ? `pages ${pageName}-page active-page` : `pages ${pageName}-page`}>\r\n            {pageInfo}\r\n        </div>\r\n    ))\r\n    return  <div className=\"page-container\">\r\n                {pageContainer}\r\n            </div>\r\n}\r\n\r\nexport default Pages",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":9},{"ruleId":"44","severity":1,"message":"48","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":12},{"ruleId":"44","severity":1,"message":"49","line":105,"column":9,"nodeType":"46","messageId":"47","endLine":105,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":165,"column":27,"nodeType":"52","messageId":"53","endLine":165,"endColumn":29},{"ruleId":"50","severity":1,"message":"51","line":186,"column":35,"nodeType":"52","messageId":"53","endLine":186,"endColumn":37},{"ruleId":"50","severity":1,"message":"51","line":188,"column":33,"nodeType":"52","messageId":"53","endLine":188,"endColumn":35},{"ruleId":"44","severity":1,"message":"54","line":5,"column":20,"nodeType":"46","messageId":"47","endLine":5,"endColumn":30},{"ruleId":"44","severity":1,"message":"55","line":5,"column":42,"nodeType":"46","messageId":"47","endLine":5,"endColumn":48},{"ruleId":"44","severity":1,"message":"56","line":5,"column":50,"nodeType":"46","messageId":"47","endLine":5,"endColumn":58},{"ruleId":"44","severity":1,"message":"57","line":5,"column":66,"nodeType":"46","messageId":"47","endLine":5,"endColumn":76},{"ruleId":"44","severity":1,"message":"58","line":41,"column":9,"nodeType":"46","messageId":"47","endLine":41,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":124,"column":17,"nodeType":"59","messageId":"60","endLine":124,"endColumn":23},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'newWeatherApi' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'numOfPages' is assigned a value but never used.","'cityId' is assigned a value but never used.","'listData' is assigned a value but never used.","'dataUpdate' is assigned a value but never used.","'nightImage' is assigned a value but never used.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]